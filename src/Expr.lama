-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalOp (op, x, y) {
  case op of
    "+" -> infix +
  | "-" -> infix -
  | "*" -> infix *
  | "/" -> infix / 
  | "%" -> infix %
  | "<" -> infix <
  | ">" -> infix >
  | "<=" -> infix <=
  | ">=" -> infix >=
  | "==" -> infix ==
  | "!=" -> infix !=
  | "&&" -> infix &&
  | "!!" -> infix !!
  esac (x, y)
}

public fun evalExpr (st, expr) {
  case expr of 
    Var (name)              -> st (name)
  | Const (value)           -> value
  | Binop (op, left, right) -> evalOp (op, evalExpr (st, left), evalExpr (st, right))
  esac
}
