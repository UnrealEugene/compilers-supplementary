-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun eval (c, stmt) {
  case stmt of
    Assn (name, expr)   -> [c.fst <- [name, evalExpr (c.fst, expr)], c.snd]
  | Seq (first, second) -> eval (eval (c, first), second)
  | Skip                -> c
  | Read (name)         -> case readWorld (c.snd) of 
      [value, world] -> [c.fst <- [name, value], world]
    esac
  | Write (expr)        -> [c.fst, writeWorld (evalExpr (c.fst, expr), c.snd)]
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
